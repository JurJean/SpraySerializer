<?php echo '<?php' . PHP_EOL; ?>
<?php $reflection = new \Zend\Code\Reflection\ClassReflection($className); ?>

<?php if ($reflection->inNamespace()): ?>
namespace <?php echo $reflection->getNamespaceName(); ?>;
<?php endif; ?>

use Spray\Serializer\Encryption\EncryptorInterface;
use Zend\Crypt\BlockCipher;

class <?php echo $reflection->getShortName() ?>Encryptor implements EncryptorInterface
{
    public function encrypt(&$data, BlockCipher $blockCipher)
    {
<?php foreach ($this->propertyInfo->findPropertiesDefinedInClass($reflection) as $property): ?>
<?php switch (true): ?>
<?php default: ?>
<?php case ( ! $this->propertyInfo->hasPropertyAnnotation($property, 'private')): ?>
<?php break; ?>
<?php case ($this->propertyInfo->isTargetScalar($property)): ?>
        $data['<?php echo $property->getName() ?>'] = $blockCipher->encrypt($data['<?php echo $property->getName() ?>']);
<?php break; ?>
<?php case ($this->propertyInfo->isTargetArray($property)): ?>
        $data['<?php echo $property->getName() ?>'] = $blockCipher->encrypt(json_encode($data['<?php echo $property->getName() ?>']));
<?php break; ?>
<?php endswitch; ?>
<?php endforeach ?>
    }

    public function decrypt(&$data, BlockCipher $blockCipher)
    {
<?php foreach ($this->propertyInfo->findPropertiesDefinedInClass($reflection) as $property): ?>
<?php switch (true): ?>
<?php default: ?>
<?php case ( ! $this->propertyInfo->hasPropertyAnnotation($property, 'private')): ?>
<?php break; ?>
<?php case ($this->propertyInfo->isTargetScalar($property)): ?>
        $data['<?php echo $property->getName() ?>'] = $blockCipher->decrypt($data['<?php echo $property->getName() ?>']);
<?php break; ?>
<?php case ($this->propertyInfo->isTargetArray($property)): ?>
        $data['<?php echo $property->getName() ?>'] = json_decode($blockCipher->decrypt($data['<?php echo $property->getName() ?>']), true);
<?php break; ?>
<?php endswitch; ?>
<?php endforeach ?>
    }
}
