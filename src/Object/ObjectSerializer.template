<?php echo '<?php' . PHP_EOL; ?>
<?php $reflection = new \Zend\Code\Reflection\ClassReflection($className); ?>

<?php if ($reflection->inNamespace()): ?>
namespace <?php echo $reflection->getNamespaceName(); ?>;
<?php endif; ?>

use Spray\Serializer\Object\BoundClosureSerializer;
use Spray\Serializer\SerializerInterface;

class <?php echo $reflection->getShortName() ?>Serializer extends BoundClosureSerializer
{
    public function __construct()
    {
        parent::__construct('<?php echo $reflection->getName(); ?>');
    }
    
    protected function bindSerializer()
    {
        return function($subject, array &$data, SerializerInterface $serializer) {
<?php foreach ($this->propertyInfo->findPropertiesDefinedInClass($reflection) as $property): ?>
<?php switch (true): ?>
<?php default: ?>
<?php case ( ! $this->propertyInfo->hasPropertyAnnotation($property, 'var')): ?>
            $data['<?php echo $property->getName() ?>'] = $subject-><?php echo $property->getName() ?>;
<?php break; ?>
<?php case ($this->propertyInfo->isTargetObject($property)): ?>
            $data['<?php echo $property->getName() ?>'] = isset($subject-><?php echo $property->getName() ?>) ? $serializer->serialize($subject-><?php echo $property->getName() ?>) : null;
<?php break; ?>
<?php case ($this->propertyInfo->isTargetArray($property) && $this->propertyInfo->isTargetArrayWithObjects($property)): ?>
            $data['<?php echo $property->getName() ?>'] = array();
            foreach ($subject-><?php echo $property->getName() ?> as $key => $value) {
                $data['<?php echo $property->getName() ?>'][$key] = $serializer->serialize($value);
            }
<?php break; ?>
<?php case ($this->propertyInfo->isTargetArray($property) && ! $this->propertyInfo->isTargetArrayWithObjects($property)): ?>
            $data['<?php echo $property->getName() ?>'] = (array) $subject-><?php echo $property->getName() ?>;
<?php break; ?>
<?php case ($this->propertyInfo->isTargetString($property)): ?>
            $data['<?php echo $property->getName() ?>'] = (string) $subject-><?php echo $property->getName() ?>;
<?php break; ?>
<?php case ($this->propertyInfo->isTargetInteger($property)): ?>
            $data['<?php echo $property->getName() ?>'] = (int) $subject-><?php echo $property->getName() ?>;
<?php break; ?>
<?php case ($this->propertyInfo->isTargetDouble($property)): ?>
            $data['<?php echo $property->getName() ?>'] = (double) $subject-><?php echo $property->getName() ?>;
<?php break; ?>
<?php case ($this->propertyInfo->isTargetFloat($property)): ?>
            $data['<?php echo $property->getName() ?>'] = (float) $subject-><?php echo $property->getName() ?>;
<?php break; ?>
<?php case ($this->propertyInfo->isTargetBoolean($property)): ?>
            $data['<?php echo $property->getName() ?>'] = (bool) $subject-><?php echo $property->getName() ?>;
<?php break; ?>
<?php endswitch; ?>
<?php endforeach ?>
        };
    }
    
    protected function bindDeserializer()
    {
        return function($subject, array &$data, SerializerInterface $serializer) {
<?php foreach ($this->propertyInfo->findPropertiesDefinedInClass($reflection) as $property): ?>
<?php switch (true): ?>
<?php default: ?>
<?php case ( ! $this->propertyInfo->hasPropertyAnnotation($property, 'var')): ?>
            $subject-><?php echo $property->getName() ?> = $data['<?php echo $property->getName() ?>'];
<?php break; ?>
<?php case ($this->propertyInfo->isTargetObject($property)): ?>
            $subject-><?php echo $property->getName() ?> = isset($data['<?php echo $property->getName() ?>']) ? $serializer->deserialize('<?php echo $this->propertyInfo->findTargetClass($property) ?>', $data['<?php echo $property->getName() ?>']) : null;
<?php break; ?>
<?php case ($this->propertyInfo->isTargetArray($property) && $this->propertyInfo->isTargetArrayWithObjects($property)): ?>
            $subject-><?php echo $property->getName() ?> = array();
            if (isset($data['<?php echo $property->getName() ?>'])) {
                foreach ($data['<?php echo $property->getName() ?>'] as $key => $value) {
                    $subject-><?php echo $property->getName() ?>[$key] = $serializer->deserialize('<?php echo $this->propertyInfo->findTargetArrayClass($property) ?>', $data['<?php echo $property->getName() ?>'][$key]);
                }
            }
<?php break; ?>
<?php case ($this->propertyInfo->isTargetArray($property) && ! $this->propertyInfo->isTargetArrayWithObjects($property)): ?>
            $subject-><?php echo $property->getName() ?> = isset($data['<?php echo $property->getName() ?>']) ? (array) $data['<?php echo $property->getName() ?>'] : array();
<?php break; ?>
<?php case ($this->propertyInfo->isTargetString($property)): ?>
            $subject-><?php echo $property->getName() ?> = isset($data['<?php echo $property->getName() ?>']) ? (string) $data['<?php echo $property->getName() ?>'] : null;
<?php break; ?>
<?php case ($this->propertyInfo->isTargetInteger($property)): ?>
            $subject-><?php echo $property->getName() ?> = isset($data['<?php echo $property->getName() ?>']) ? (int) $data['<?php echo $property->getName() ?>'] : null;
<?php break; ?>
<?php case ($this->propertyInfo->isTargetDouble($property)): ?>
            $subject-><?php echo $property->getName() ?> = isset($data['<?php echo $property->getName() ?>']) ? (double) $data['<?php echo $property->getName() ?>'] : null;
<?php break; ?>
<?php case ($this->propertyInfo->isTargetFloat($property)): ?>
            $subject-><?php echo $property->getName() ?> = isset($data['<?php echo $property->getName() ?>']) ? (float) $data['<?php echo $property->getName() ?>'] : null;
<?php break; ?>
<?php case ($this->propertyInfo->isTargetBoolean($property)): ?>
            $subject-><?php echo $property->getName() ?> = isset($data['<?php echo $property->getName() ?>']) ? (bool) $data['<?php echo $property->getName() ?>'] : null;
<?php break; ?>
<?php endswitch; ?>
<?php endforeach ?>
        };
    }
}
